kanjicode -byte

### make xyzsh setting directory ###
print ~/.xyzsh | if(| -e) (
    | if(! | -d) (
        print "~/.xyzsh is not directory\n"
        exit
    )
    sys::chmod 700 ~/.xyzsh
) else (
    sys::mkdir -p ~/.xyzsh
    sys::chmod 700 ~/.xyzsh
)

print ~/.xyzsh/program | if(! | -e) (
    print "mail date crontab hostname basename tee find unzip diff seq env sleep ps kill killall pkill autoconf automake od nm gcc uname chgrp chmod chown sed awk make git ssh scp tar sudo gzip bash cat ls pwd cp mv rm rmdir ln vi vim grep egrep find less wc echo which whoami head tail uniq mkdir touch man" | split > ~/.xyzsh/program
)

def install_external_program_to_root_object (
    sys::cat ~/.xyzsh/program | each (
        | chomp | var -local prog

        if(! defined ::$prog) (
            try ( 
                ref ::sys::$prog | ref ::$prog
            ) catch ()
        )
    )
)

def install_all_external_program_to_root_object (
    ::sys::show  | ::sys::grep "external program" | scan '(.+?): external program' | each ( 
        | chomp | var -local prog

        if(! defined ::$prog || typeof ::$prog | chomp | = "external program") (
            try (
                ref ::sys::$prog | ref ::$prog
            ) catch ()
        )
    )

    print 1 | var InstallAllExternalProgram
)

def rehash -inherit (
    inherit

    if(InstallAllExternalProgram | -eq 1) (
        install_all_external_program_to_root_object
    ) else (
        install_external_program_to_root_object
    )
)

print 0 | var InstallAllExternalProgram
install_external_program_to_root_object

export XYZSH_NEST_LEVEL | + 1 | export XYZSH_NEST_LEVEL
prompt ( 
    if(export XYZSH_NEST_LEVEL | -eq 1) (
        pwd | chomp
        print " > "
    ) else (
        pwd | chomp
        print "("
        export XYZSH_NEST_LEVEL | chomp
        print ")"
        print " > "
    )
)

def jump (
    if(! print ~/.xyzsh/jump | -e) (
        print <<<EOS
/etc/
/var/log/
EOS > ~/.xyzsh/jump
    )

    cd $(cat ~/.xyzsh/jump | selector | chomp)
)

def menu (
    if(! print ~/.xyzsh/menu | -e) (
        print <<<EOS
vim ~/.xyzsh/menu
vim ~/.xyzsh/macro
vim ~/.xyzsh/jump
vim ~/.xyzsh/program
ls -al | uc| less
pwd | scan . | less
ls | each ( if(|chomp | -d) ( | print ) )
EOS > ~/.xyzsh/menu
    )

    eval $(cat ~/.xyzsh/menu | selector | chomp)
)

# when pressing CTRL-X on cmdline, this is called
def cmdline_macro (
    if(! print ~/.xyzsh/macro | -e) (
        print <<<EOS
whoami | chomp
pwd | chomp
fselector -multiple | each ( | chomp | quote | pomch ) | join | chomp
EOS > ~/.xyzsh/macro
    )

    | eval $(try ( 
            cat ~/.xyzsh/macro | selector
        ) catch (
            rl::clear_screen
        )
    )
)

def max (
    | var -local MaxValue
    | each ( 
        if(| -gt $MaxValue) (
            | var -local MaxValue
        )
    )

    MaxValue
)

def min (
    | var -local MinValue
    | each ( 
        if(| -lt $MinValue ) (
            | var -local MinValue
        )
    )

    MinValue
)

### interactive shell settings ###
print 1000 | export XYZSH_HISTSIZE
print ~/.xyzsh/history | export XYZSH_HISTFILE

print "on" | export XYZSH_BLINK_MATCHING_PAREN
# if you don't need to check matching paren on interactive shell, you can set "off" on this variable

print 500 | export XYZSH_BLINK_MATCHING_PAREN_MILLI_SEC
# Above function of xyzsh blink matching paren uses this value to sleep for this milli sec.

print "on" | export XYZSH_MENU_SELECT
# if you don't need to completion with menu select, you can set "off" on this variable

el::keybind -mode emacs

#el::keybind -mode vi
# you can set emacs or vi keybind mode.

el::keybind "^W" "ed-delete-prev-word"
el::keybind "^R" "em-inc-search-prev"
# This is my favorite. you can castamize key binds on interactive shell with el::keybind. Run el::help keybind to see the help.

print off | export HIST_IGNORE_SPACE
# If you enable this, you can add space at head to prohibit from appending commandline history.

